{"version":3,"sources":["components/ComponentTypeSelector.js","draggable_components/DC_Button.js","draggable_components/DC_Input.js","draggable_components/DC_Container.js","actions.js","tools.js","components/DraggablePanel.js","reducers/edit_mode.js","reducers/config.js","reducers/index.js","redux-store.js","components/TopPanel.js","components/RootPanelsContainer.js","components/DraggableComponentsDrawer.js","routes/DynamicPage.js","components/LeftPanel.js","App.js","serviceWorker.js","index.js"],"names":["Section","option","options","i","props","children","push","React","cloneElement","key","value","selected","default","onClick","onChange","key_name","this","className","open","icon","name","Component","Option","text","custom_icon","ComponentTypeSelector","state","PreviewComponent","preview_component_props","component_id","dispatch","default_props","opened_section","undefined","preview_component","bind","onSectionClick","prev_props","setState","section_key_name","new_section_name","new_props","section","sections","mapStateToProps","store_config","config","_DC_Button_CP","component_props","components","target_component_id","last_component_props","icon_color_style","width","height","borderRadius","icon_color_red","backgroundColor","icon_color_blue","icon_type","display","alignItems","justifyContent","fontSize","icon_type_normal","color","fontWeight","icon_type_outlined","boxSizing","border","icon_type_lowemp","save","onInputChange","onTypeSelectorChange","event","target","ts_props","edited_component","config_edit_component","type","placeholder","DC_Button","style","DC_Button_CP","connect","deleted","deleteComponent","config_delete_component","style_props","size","emphasis","editmode_select_component","DC_Input_CP","DC_Input","DC_Container_CP","DC_Ð¡ontainer","dragOver","child_components","onDragEnter","onDragLeave","onDragOver","onDrop","next_props","next_state","store_component","l","length","component","element","e","preventDefault","component_type","dataTransfer","getData","stopPropagation","new_component","createDraggableComponentFromType","new_child_components","new_component_object","panel_id","config_component_edit_children","CONFIG_COMPONENT_EDIT_CHILDREN","generateRandomId","Math","floor","random","toString","id","DC_Container","DraggablePanel","empty","deletePanel","panels","store_panel","component_el","CONFIG_EDIT_COMPONENT","component_object","CONFIG_PANEL_ADD_COMPONENT","config_assign_component","config_delete_panel","CONFIG_DELETE_PANEL","EDITMODE_ENTER","EDITMODE_LEAVE","EDITMODE_SELECT_COMPONENT","CONFIG_ADD_PANEL","CONFIG_DELETE_COMPONENT","INITIAL_STATE","active","selected_component","combineReducers","edit_mode","action","panel","new_components_object","child_component_id","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","TopPanel","switchEditmode","store_editmode","editmode_leave","editmode_enter","RootPanelContainer","child_panels","createNewPanel","new_panel","config_create_panel","hidden","new_contaier","onDragStart","effectAllowed","setData","draggable","DraggableComponentsDrawer","DynamicPage","root_panel_containers_count","createRootContainer","containers","RootPanelsContainer","ComponentEditMode","selected_component_id","LeftPanel","App","store","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8927c4f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./ComponentTypeSelector.css\";\r\n\r\nexport class Section extends React.Component {\r\n    // TODO: @performance maybe?\r\n    render() {\r\n        let options = [];\r\n        let option;\r\n\r\n        for(const i in this.props.children) {\r\n            option = this.props.children[i];\r\n\r\n            options.push(React.cloneElement(option, {\r\n                key: option.props.value,\r\n                selected: (this.props.selected || this.props.default) === option.props.value,\r\n                onClick: () => { this.props.onChange(this.props.key_name, this.props.children[i].props.value) }\r\n            }));\r\n        }\r\n\r\n        return (\r\n            <div className={ \"section\" + (this.props.open ? \" open\" : \"\") }>\r\n                <div className=\"name\" onClick={ this.props.onClick }>{ this.props.icon } { this.props.name }</div>\r\n                <div className=\"name-arrow\"><i className=\"fas fa-chevron-down\"></i></div>\r\n                <div className=\"container\">\r\n                    { options }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSection.propTypes = {\r\n    key_name: PropTypes.string.isRequired,\r\n    icon: PropTypes.element.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    selected: PropTypes.string,\r\n    default: PropTypes.string,\r\n\r\n    children: PropTypes.array.isRequired,\r\n    open: PropTypes.bool,\r\n\r\n    // We shouldn't put .isRequired here because these props will be given to the element by ComponentTypeSelector\r\n    onChange: PropTypes.func,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport function Option(props) {\r\n    return (\r\n        <div\r\n        className={ \"option\" + (props.selected ? \" selected\" : \"\") }\r\n        onClick={ props.onClick }>\r\n            <div>\r\n                <div className=\"tick\"></div> { props.text }\r\n            </div>\r\n            <div className=\"custom-icon\">{ props.custom_icon }</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nOption.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    custom_icon: PropTypes.element,\r\n\r\n    // We shouldn't put .isRequired here because these props will be given to the element by Section component\r\n    selected: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n}\r\n\r\nexport default class ComponentTypeSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            PreviewComponent: () => false,\r\n            preview_component_props: { component_id: \"-1\", dispatch: () => false, ...props.default_props },\r\n\r\n            opened_section: undefined\r\n        }\r\n\r\n        // Get the preview component\r\n        if(this.props.preview_component) {\r\n            this.state.PreviewComponent = this.props.preview_component;\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSectionClick = this.onSectionClick.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        // Parent provided new default props\r\n        if(prev_props.default_props !== this.props.default_props) {\r\n            this.setState({ preview_component_props: {\r\n                component_id: \"-1\", dispatch: () => false,\r\n                ...this.props.default_props\r\n            } });\r\n        }\r\n    }\r\n\r\n    onSectionClick(section_key_name) {\r\n        let new_section_name = section_key_name;\r\n\r\n        if(section_key_name === this.state.opened_section) {\r\n            new_section_name = undefined;\r\n        }\r\n\r\n        this.setState({ opened_section: new_section_name });\r\n    }\r\n\r\n    onChange(key, value) {\r\n        let new_props = this.state.preview_component_props;\r\n        new_props[key] = value;\r\n\r\n        // TODO: @high @misc This is bad because we also delete this from this component\r\n        // Thank you js for not having pointers\r\n        delete new_props.dispatch;\r\n        delete new_props.component_id;\r\n\r\n        // Send the props to the parent component\r\n        this.props.onChange && this.props.onChange(new_props);\r\n    }\r\n\r\n    // TODO: @performance maybe?\r\n    render() {\r\n        let sections = [];\r\n        let section;\r\n\r\n        for(const i in this.props.children) {\r\n            section = this.props.children[i];\r\n\r\n            sections.push(React.cloneElement(section, {\r\n                key: section.props.key_name,\r\n                open: this.state.opened_section === section.props.key_name,\r\n                selected: this.state.preview_component_props[section.props.key_name],\r\n                onChange: this.onChange,\r\n                onClick: () => this.onSectionClick(this.props.children[i].props.key_name)\r\n            }));\r\n        }\r\n\r\n        return (\r\n            <div className=\"component-type-selector\">\r\n                <div className=\"preview-window\">\r\n                    <this.state.PreviewComponent { ...this.state.preview_component_props } />\r\n                </div>\r\n\r\n                { sections }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nComponentTypeSelector.propTypes = {\r\n    preview_component: PropTypes.func.isRequired,\r\n    children: PropTypes.array.isRequired,\r\n    default_props: PropTypes.object,\r\n\r\n    onChange: PropTypes.func\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ComponentTypeSelector, { Section, Option } from \"../components/ComponentTypeSelector\";\r\n\r\nimport { editmode_select_component, config_delete_component, config_edit_component } from \"../actions\";\r\n\r\n// This is used for both components\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\n// Left panel config for this component\r\n// TODO: @naming\r\nclass _DC_Button_CP extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get component props from redux store\r\n        const component_props = props.store_config.components[props.target_component_id].props || {};\r\n\r\n        this.state = {\r\n            component_props,\r\n            last_component_props: component_props\r\n        }\r\n\r\n        const icon_color_style = {\r\n            width: 8,\r\n            height: 8,\r\n            borderRadius: 3\r\n        }\r\n\r\n        this.icon_color_red = {\r\n            ...icon_color_style,\r\n            backgroundColor: \"var(--color-red)\"\r\n        }\r\n\r\n        this.icon_color_blue = {\r\n            ...icon_color_style,\r\n            backgroundColor: \"var(--color-blue)\"\r\n        }\r\n\r\n        const icon_type = {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n\r\n            width: 14,\r\n            height: 14,\r\n            borderRadius: 3,\r\n\r\n            fontSize: 10,\r\n        }\r\n\r\n        this.icon_type_normal = {\r\n            ...icon_type,\r\n            color: \"rgba(255, 255, 255, 0.95)\",\r\n            fontWeight: 500,\r\n            backgroundColor: \"var(--color-blue)\"\r\n        }\r\n\r\n        this.icon_type_outlined = {\r\n            ...icon_type,\r\n            color: \"var(--color-blue)\",\r\n            fontWeight: 500,\r\n            boxSizing: \"border-box\",\r\n            border: \"1px solid var(--color-blue)\"\r\n        }\r\n\r\n        this.icon_type_lowemp = {\r\n            ...icon_type,\r\n            color: \"var(--color-blue)\",\r\n            fontWeight: 500,\r\n        }\r\n\r\n        this.save = this.save.bind(this);\r\n\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onTypeSelectorChange = this.onTypeSelectorChange.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        if(prev_props.target_component_id !== this.props.target_component_id) {\r\n            // Different component was selected, update the props\r\n            const component_props = this.props.store_config.components[this.props.target_component_id].props || {};\r\n\r\n            this.setState({ component_props, last_component_props: component_props });\r\n        }\r\n    }\r\n\r\n    onInputChange(event) {\r\n        // TODO: @misc do some checks here\r\n        if(!event.target.name) return false;\r\n\r\n        this.setState({ component_props: { ...this.state.component_props, [event.target.name]: event.target.value } });\r\n    }\r\n\r\n    onTypeSelectorChange(ts_props) {\r\n        // TODO: @performace\r\n        this.setState({ component_props: { ...this.state.component_props, ...ts_props } })\r\n    }\r\n\r\n    save() {\r\n        const edited_component = this.props.store_config.components[this.props.target_component_id];\r\n\r\n        edited_component.props = { ...edited_component.props, ...this.state.component_props };\r\n\r\n        // Save the component in `config` redux store\r\n        config_edit_component(edited_component, this.props.dispatch);\r\n\r\n        this.setState({ last_component_props: this.state.component_props });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content component-editor\">\r\n                <div className=\"component-intro-block\">\r\n                    <div className=\"name\">Button</div>\r\n                    <div className=\"description\">Used mainly for API calls.</div>\r\n                </div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Text</div>\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    className=\"ui-input1\"\r\n                    onChange={ this.onInputChange }\r\n                    value={ this.state.component_props.text || \"\" }\r\n                    placeholder=\"Button\" />\r\n                </div>\r\n\r\n                <ComponentTypeSelector\r\n                onChange={ this.onTypeSelectorChange }\r\n                preview_component={ DC_Button }\r\n                default_props={ this.state.component_props }>\r\n                    <Section key_name=\"size\" default=\"bigger\" name=\"Size\" icon={ <i className=\"fas fa-ruler\"></i> }>\r\n                        <Option value=\"small\" text=\"Small\" />\r\n                        <Option value=\"bigger\" text=\"Default\" />\r\n                        <Option value=\"big\" text=\"Big\" />\r\n                    </Section>\r\n                    <Section key_name=\"emphasis\" default=\"normal\" name=\"Type\"\r\n                    icon={ <i className=\"fas fa-swatchbook\"></i> }>\r\n                        <Option value=\"normal\" text=\"Normal\" custom_icon={\r\n                            <div style={ this.icon_type_normal }>A</div>\r\n                        } />\r\n                        <Option value=\"outlined\" text=\"Outlined\" custom_icon={\r\n                            <div style={ this.icon_type_outlined }>A</div>\r\n                        } />\r\n                        <Option value=\"low-emp\" text=\"Low emphasis\" custom_icon={\r\n                            <div style={ this.icon_type_lowemp }>A</div>\r\n                        } />\r\n                    </Section>\r\n                    <Section key_name=\"color\" default=\"blue\" name=\"Color\" icon={ <i className=\"fas fa-palette\"></i> }>\r\n                        <Option value=\"blue\" text=\"Blue\" custom_icon={ <div style={ this.icon_color_blue }></div> } />\r\n                        <Option value=\"red\" text=\"Red\" custom_icon={ <div style={ this.icon_color_red }></div> } />\r\n                    </Section>\r\n                </ComponentTypeSelector>\r\n\r\n                <div className={\"bottom-panel\" +\r\n                (this.state.last_component_props === this.state.component_props ? \" hidden\" : \"\")}>\r\n                    <div></div>\r\n                    <div>\r\n                        <button onClick={ this.save } className=\"ui-button1 big low-emp\">save</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n_DC_Button_CP.propTypes = {\r\n    target_component_id: PropTypes.string.isRequired,\r\n\r\n    store_config: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nexport const DC_Button_CP = connect(mapStateToProps)(_DC_Button_CP);\r\n\r\n// TODO: @misc component-buttons really should be in another file, as it will be used in every component\r\n// TODO: @misc we should also do something about deleteComponent function, it will be used in every component too\r\nclass DC_Button extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            deleted: false\r\n        }\r\n\r\n        this.deleteComponent = this.deleteComponent.bind(this);\r\n    }\r\n\r\n    deleteComponent() {\r\n        config_delete_component(this.props.component_id, this.props.dispatch);\r\n        this.setState({ deleted: true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.deleted) return false;\r\n\r\n        // This is the \"style\" props for this component, if you need to access config_store, component_id, or anything\r\n        // else internal, use this.props instead\r\n        let style_props;\r\n\r\n        // Check if this component is in redux store\r\n        if( this.props.component_id !== \"-1\" && this.props.store_config &&\r\n            this.props.store_config.components[this.props.component_id] ) {\r\n            style_props = this.props.store_config.components[this.props.component_id].props || {};\r\n        } else {\r\n            // This component is not in the redux store, it's styles are probably in this.props\r\n            style_props = this.props;\r\n        }\r\n\r\n        // TODO: @misc This is messy\r\n        let className = \"ui-button\" + (style_props.type || \"1\");\r\n\r\n        if(style_props.size) {\r\n            className += \" \" + style_props.size;\r\n        } else {\r\n            className += \" bigger\";\r\n        }\r\n\r\n        if(style_props.color) className += \" \" + style_props.color;\r\n        if(style_props.emphasis) className += \" \" + style_props.emphasis;\r\n\r\n        return (\r\n            <div\r\n            className=\"ui-draggable-component\"\r\n            >\r\n                <button\r\n                className={ className }\r\n                component_id={ this.props.component_id }\r\n                >\r\n                    { style_props.text || \"button\" }\r\n                </button>\r\n\r\n                <div className=\"component-buttons\">\r\n                    <div\r\n                    className=\"button\"\r\n                    onClick={ () => editmode_select_component(this.props.component_id, this.props.dispatch) }>\r\n                        <i className=\"fas fa-sliders-h\"></i>\r\n                    </div>\r\n                    <div\r\n                    className=\"button red\"\r\n                    onClick={ this.deleteComponent }>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDC_Button.propTypes = {\r\n    text: PropTypes.string,\r\n    type: PropTypes.string,\r\n    size: PropTypes.string,\r\n    color: PropTypes.string,\r\n    emphasis: PropTypes.string,\r\n\r\n    store_config: PropTypes.object,\r\n\r\n    component_id: PropTypes.string.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps)(DC_Button);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { editmode_select_component, config_delete_component } from \"../actions\";\r\n\r\n// Left panel config for this component\r\nexport class DC_Input_CP extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"component-intro-block\">\r\n                    <div className=\"name\">Input Field</div>\r\n                    <div className=\"description\">A basic input field.</div>\r\n                </div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Component name</div>\r\n                    <input type=\"text\" className=\"ui-input1 monospace\" placeholder=\"username\" />\r\n                    <div className=\"ui-text small gray\"><i className=\"fas fa-exclamation-circle\"></i>\r\n                    This name will be used in API calls.</div>\r\n                </div>\r\n\r\n                <div className=\"ui-select-with-name\">\r\n                    <div className=\"ui-input-name1\">Input type</div>\r\n                    <select className=\"ui-input1\">\r\n                        <option value=\"text\">Text</option>\r\n                        <option value=\"number\">Number</option>\r\n                        <option value=\"email\">Email</option>\r\n                        <option value=\"password\">Password</option>\r\n                        <option value=\"url\">URL</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Default value</div>\r\n                    <input type=\"text\" className=\"ui-input1\" placeholder=\"foobar\" />\r\n                </div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Pattern</div>\r\n                    <input type=\"text\" className=\"ui-input1 monospace\" placeholder=\"[A-Za-z]\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// TODO: @misc component-buttons really should be in another file, as it will be used in every component\r\n// TODO: @misc we should also do something about deleteComponent function, it will be used in every component too\r\nclass DC_Input extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            deleted: false\r\n        }\r\n\r\n        this.deleteComponent = this.deleteComponent.bind(this);\r\n    }\r\n\r\n    deleteComponent() {\r\n        config_delete_component(this.props.component_id, this.props.dispatch);\r\n        this.setState({ deleted: true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.deleted) return false;\r\n\r\n        return (\r\n            <div\r\n            className=\"ui-draggable-component\"\r\n            >\r\n                <div component_id={ this.props.component_id } className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Some input</div>\r\n                    <input type=\"text\" className=\"ui-input1\" />\r\n                </div>\r\n\r\n                <div className=\"component-buttons\">\r\n                    <div\r\n                    className=\"button\"\r\n                    onClick={ () => editmode_select_component(this.props.component_id, this.props.dispatch) }>\r\n                        <i className=\"fas fa-sliders-h\"></i>\r\n                    </div>\r\n                    <div\r\n                    className=\"button red\"\r\n                    onClick={ this.deleteComponent }>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDC_Input.propTypes = {\r\n    component_id: PropTypes.string.isRequired,\r\n\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect()(DC_Input);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { createDraggableComponentFromType } from \"../tools\";\r\nimport {\r\n    config_component_edit_children,\r\n    config_edit_component,\r\n    editmode_select_component,\r\n    config_delete_component }\r\nfrom \"../actions\";\r\n\r\n// Left panel config for this component\r\nexport class DC_Container_CP extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"component-intro-block\">\r\n                    <div className=\"name\">Horizontal container</div>\r\n                    <div className=\"description\">Used to horizontally position other components.</div>\r\n                </div>\r\n\r\n                <div className=\"ui-text\">ð§ Options will be here...</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// TODO: @misc component-buttons really should be in another file, as it will be used in every component\r\n// TODO: @misc we should also do something about deleteComponent function, it will be used in every component too\r\nclass DC_Ð¡ontainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dragOver: false,\r\n            deleted: false,\r\n            child_components: []\r\n        }\r\n\r\n        this.deleteComponent = this.deleteComponent.bind(this);\r\n\r\n        this.onDragEnter = this.onDragEnter.bind(this);\r\n        this.onDragLeave = this.onDragLeave.bind(this);\r\n        this.onDragOver = this.onDragOver.bind(this);\r\n        this.onDrop = this.onDrop.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(next_props, next_state) {\r\n        // Deleted\r\n        if(next_state.deleted !== this.state.deleted) return true;\r\n\r\n        // On child_components update (happens when a component changes in `config` redux store)\r\n        if(next_state.child_components !== this.state.child_components) return true;\r\n\r\n        // DragOver change\r\n        if(next_state.dragOver !== this.state.dragOver) return true;\r\n\r\n        // Check if the component changed in `config` redux store\r\n        if( next_props.store_config.components[this.props.component_id]\r\n            !==\r\n            this.props.store_config.components[this.props.component_id]\r\n        ) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        // To make things a bit less messy\r\n        const store_component = this.props.store_config.components[this.props.component_id];\r\n\r\n        // Component's config changed\r\n        if(prev_props.store_config.components[this.props.component_id] !== store_component) {\r\n            // Get all child_components for this container\r\n            const l = store_component.child_components.length;\r\n            const child_components = [];\r\n\r\n            for(let i = 0; i < l; i++) {\r\n                const component_id = store_component.child_components[i];\r\n                const component = this.props.store_config.components[component_id];\r\n\r\n                // Check if component is not deleted\r\n                if(component) {\r\n                    child_components.push(component.element);\r\n                }\r\n            }\r\n\r\n            this.setState({ child_components });\r\n        }\r\n    }\r\n\r\n    onDragEnter(e) {\r\n        this.setState({ dragOver: true });\r\n\r\n        e.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    onDragLeave(e) {\r\n        this.setState({ dragOver: false });\r\n\r\n        e.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    onDragOver(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    onDrop(e) {\r\n        // Get the component type from dataTransfer\r\n        const component_type = e.dataTransfer.getData(\"text\");\r\n\r\n        // Check if user is trying to drop a container inside a container\r\n        // TODO: @css maybe flash the container red to indicate that you can't do that\r\n        if(component_type === \"horizontal_container\") {\r\n            this.setState({ dragOver: false });\r\n\r\n            e.stopPropagation();\r\n            return false;\r\n        }\r\n\r\n        // Create a new component from type\r\n        const new_component = createDraggableComponentFromType(component_type);\r\n\r\n        // Check if new component was reutrned (the function above returns false on error)\r\n        if(new_component) {\r\n            // Updated component's child_components (ids)\r\n            let new_child_components;\r\n\r\n            // New component object for `config` redux store\r\n            // TODO: @misc We should have an interface for component object\r\n            const new_component_object = {\r\n                element: new_component,\r\n                type: component_type,\r\n                panel_id: this.props.panel_id\r\n            }\r\n\r\n            // Check if this component (DC_Container) has children\r\n            if(this.props.store_config.components[this.props.component_id].child_components) {\r\n                // TODO: @performance\r\n                new_child_components = [\r\n                    ...this.props.store_config.components[this.props.component_id].child_components,\r\n                    new_component.props.component_id\r\n                ]\r\n            } else {\r\n                new_child_components = [new_component.props.component_id];\r\n            }\r\n\r\n            // Add the new component to the store\r\n            config_edit_component(new_component_object, this.props.dispatch);\r\n\r\n            // Append the new component to this DC_Container\r\n            config_component_edit_children(this.props.component_id, new_child_components, this.props.dispatch);\r\n        }\r\n\r\n        this.setState({ dragOver: false });\r\n\r\n        e.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    deleteComponent() {\r\n        config_delete_component(this.props.component_id, this.props.dispatch);\r\n        this.setState({ deleted: true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.deleted) return false;\r\n\r\n        return (\r\n            <div\r\n            className=\"ui-draggable-component\"\r\n            >\r\n                <div\r\n                component_id={ this.props.component_id }\r\n                className={ \"ui-ccontainer\" + (this.state.dragOver ? \" drag-over\" : \"\") }\r\n\r\n                onDragEnter={ this.onDragEnter }\r\n                onDragLeave={ this.onDragLeave }\r\n                onDrop={ this.onDrop }\r\n                onDragOver={ this.onDragOver }\r\n                >\r\n                    { this.state.child_components }\r\n                </div>\r\n\r\n                <div className=\"component-buttons\">\r\n                    <div\r\n                    className=\"button\"\r\n                    onClick={ () => editmode_select_component(this.props.component_id, this.props.dispatch) }>\r\n                        <i className=\"fas fa-sliders-h\"></i>\r\n                    </div>\r\n                    <div\r\n                    className=\"button red\"\r\n                    onClick={ this.deleteComponent }>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDC_Ð¡ontainer.propTypes = {\r\n    component_id: PropTypes.string.isRequired,\r\n    panel_id: PropTypes.string.isRequired,\r\n\r\n    dispatch: PropTypes.func.isRequired,\r\n    store_config: PropTypes.object.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DC_Ð¡ontainer);\r\n","import React from \"react\";\r\n\r\nimport { generateRandomId } from \"./tools\";\r\n\r\nimport DraggablePanel from \"./components/DraggablePanel\";\r\n\r\n// We probably should use this functions only outside this file, they are just wrappers\r\n\r\nexport const EDITMODE_ENTER = \"EDITMODE_ENTER\";\r\nexport function editmode_enter(dispatch) {\r\n    dispatch({ type: EDITMODE_ENTER });\r\n}\r\n\r\nexport const EDITMODE_LEAVE = \"EDITMODE_LEAVE\";\r\nexport function editmode_leave(dispatch) {\r\n    dispatch({ type: EDITMODE_LEAVE });\r\n}\r\n\r\nexport const EDITMODE_SELECT_COMPONENT = \"EDITMODE_SELECT_COMPONENT\";\r\nexport function editmode_select_component(component_id, dispatch) {\r\n    dispatch({ type: EDITMODE_SELECT_COMPONENT, component_id });\r\n}\r\n\r\n// Add a new panel\r\n// TODO: @misc We should have an interface for component object\r\nexport const CONFIG_ADD_PANEL = \"CONFIG_ADD_PANEL\";\r\nexport function config_add_panel(panel_object, dispatch) {\r\n    dispatch({ type: CONFIG_ADD_PANEL, panel: panel_object });\r\n}\r\n\r\n// Delete a panel\r\nexport const CONFIG_DELETE_PANEL = \"CONFIG_DELETE_PANEL\";\r\nexport function config_delete_panel(panel_id, dispatch) {\r\n    dispatch({ type: CONFIG_DELETE_PANEL, panel_id });\r\n}\r\n\r\n// Delete a component\r\nexport const CONFIG_DELETE_COMPONENT = \"CONFIG_DELETE_COMPONENT\";\r\nexport function config_delete_component(component_id, dispatch) {\r\n    dispatch({ type: CONFIG_DELETE_COMPONENT, component_id });\r\n}\r\n\r\n// Assign component to the panel (component must be registered using CONFIG_ADD_COMPONENT)\r\nexport const CONFIG_PANEL_ADD_COMPONENT = \"CONFIG_PANEL_ADD_COMPONENT\";\r\nexport function config_panel_add_component(panel_id, component_id, dispatch) {\r\n    dispatch({ type: CONFIG_PANEL_ADD_COMPONENT, panel_id, component_id });\r\n}\r\n\r\n// Add/edit component in the store\r\nexport const CONFIG_EDIT_COMPONENT = \"CONFIG_EDIT_COMPONENT\";\r\nexport function config_edit_component(component_object, dispatch) {\r\n    dispatch({ type: CONFIG_EDIT_COMPONENT, component_object });\r\n}\r\n\r\n// Set children for a component (used in DC_Container)\r\nexport const CONFIG_COMPONENT_EDIT_CHILDREN = \"CONFIG_COMPONENT_EDIT_CHILDREN\";\r\nexport function config_component_edit_children(component_id, child_components, dispatch) {\r\n    dispatch({ type: CONFIG_COMPONENT_EDIT_CHILDREN, component_id, child_components });\r\n}\r\n\r\n// Create a new panel, add to `config` redux store and return a React element\r\nexport function config_create_panel(dispatch) {\r\n    const panel_id = generateRandomId();\r\n\r\n    const panel_object = {\r\n        id: panel_id,\r\n        child_components: []\r\n    }\r\n\r\n    // Add a panel to the store\r\n    dispatch({ type: CONFIG_ADD_PANEL, panel: panel_object });\r\n\r\n    // Create a React element\r\n    const new_panel_el = <DraggablePanel key={ panel_id } panel_id={ panel_id } />\r\n\r\n    return new_panel_el;\r\n}\r\n\r\n// Assign component to the panel\r\nexport function config_assign_component(component_el, component_type, panel_id, dispatch) {\r\n    // TODO: @misc We should have an interface for component object\r\n    const component_object = {\r\n        element: component_el,\r\n        type: component_type,\r\n        panel_id: panel_id\r\n    }\r\n\r\n    // TODO: @misc not sure if this is the best way to do this\r\n    dispatch({ type: CONFIG_EDIT_COMPONENT, component_object });\r\n    dispatch({ type: CONFIG_PANEL_ADD_COMPONENT, panel_id, component_id: component_el.props.component_id });\r\n}\r\n","import React from \"react\";\r\n\r\nimport DC_Button from \"./draggable_components/DC_Button\";\r\nimport DC_Input from \"./draggable_components/DC_Input\";\r\nimport DC_Container from \"./draggable_components/DC_Container\";\r\n\r\nexport function generateRandomId() {\r\n    return Math.floor(Math.random() * 9999999999).toString();\r\n}\r\n\r\n// TODO: @high @performance It's a better idea to insted get a react component function, instead of a component.\r\n// Like this: `return DC_Button`, instead of `return <DC_Button id=\"...\" />`\r\nexport function createDraggableComponentFromType(type, panel_id) {\r\n    const id = generateRandomId();\r\n\r\n    switch(type) {\r\n        case \"button\":\r\n            return <DC_Button key={ id } component_id={ id } />\r\n\r\n        case \"input\":\r\n            return <DC_Input key={ id } component_id={ id } />\r\n\r\n        case \"horizontal_container\":\r\n            return <DC_Container key={ id } component_id={ id } panel_id={ panel_id } />\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { createDraggableComponentFromType } from \"../tools\";\r\nimport { config_assign_component, config_delete_panel } from \"../actions\";\r\n\r\nclass DraggablePanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // TODO: @css Add dragOver styles\r\n            dragOver: false,\r\n            empty: true,\r\n            deleted: false,\r\n            child_components: []\r\n        }\r\n\r\n        this.deletePanel = this.deletePanel.bind(this);\r\n\r\n        this.onDragEnter = this.onDragEnter.bind(this);\r\n        this.onDragLeave = this.onDragLeave.bind(this);\r\n        this.onDragOver = this.onDragOver.bind(this);\r\n        this.onDrop = this.onDrop.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(next_props, next_state) {\r\n        // Deleted\r\n        if(this.state.deleted) return false;\r\n        if(next_state.deleted !== this.state.deleted) return true;\r\n\r\n        // Empty\r\n        if(next_state.empty !== this.state.empty) return true;\r\n\r\n        // On child_components update (happens when a panel changes in `config` redux store)\r\n        if(next_state.child_components !== this.state.child_components) return true;\r\n\r\n        // Check if the panel changed in `config` redux store\r\n        if(\r\n            next_props.store_config.panels[this.props.panel_id] !== this.props.store_config.panels[this.props.panel_id]\r\n        ) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        // This panel was deleted\r\n        if(this.props.store_config.panels[this.props.panel_id] === false) {\r\n            this.setState({ deleted: true });\r\n            return false;\r\n        }\r\n\r\n        // To make things a bit less messy\r\n        const store_panel = this.props.store_config.panels[this.props.panel_id];\r\n\r\n        // Panel config changed\r\n        if(prev_props.store_config.panels[this.props.panel_id] !== store_panel) {\r\n            // Get all child_components for this panel\r\n            const l = store_panel.child_components.length;\r\n\r\n            // If the panel is empty\r\n            if(l === 0) {\r\n                this.setState({ empty: true });\r\n                return;\r\n            }\r\n\r\n            const child_components = [];\r\n\r\n            for(let i = 0; i < l; i++) {\r\n                const component_id = store_panel.child_components[i];\r\n                const component = this.props.store_config.components[component_id];\r\n\r\n                // Check if component is not deleted\r\n                if(component) {\r\n                    child_components.push(component.element);\r\n                }\r\n            }\r\n\r\n            this.setState({ child_components, empty: false });\r\n        }\r\n    }\r\n\r\n    onDragEnter(e) {\r\n        this.setState({ dragOver: true });\r\n\r\n        e.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    onDragLeave(e) {\r\n        this.setState({ dragOver: false });\r\n\r\n        e.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    onDragOver(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    onDrop(e) {\r\n        // Get the component type from dataTransfer\r\n        const component_type = e.dataTransfer.getData(\"text\");\r\n\r\n        // Create a new component from type\r\n        const new_component = createDraggableComponentFromType(component_type, this.props.panel_id);\r\n\r\n        // Check if the new component was reutrned (the function above returns false on error)\r\n        if(new_component) {\r\n            // Assign component to panel in redux store (which will cause this panel to rerender with a new component)\r\n            config_assign_component(new_component, component_type, this.props.panel_id, this.props.dispatch);\r\n        }\r\n\r\n        this.setState({ dragOver: false });\r\n\r\n        e.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    deletePanel() {\r\n        config_delete_panel(this.props.panel_id, this.props.dispatch);\r\n    }\r\n\r\n    render() {\r\n        if(this.state.deleted) return false;\r\n\r\n        return (\r\n            <div\r\n            className={\r\n                \"draggable-panel\" +\r\n                (this.state.dragOver ? \" drag-over\" : \"\") +\r\n                (this.state.empty ? \" empty\" : \"\")\r\n            }\r\n            panel_id={ this.props.panel_id }\r\n\r\n            onDragEnter={ this.onDragEnter }\r\n            onDragLeave={ this.onDragLeave }\r\n            onDrop={ this.onDrop }\r\n            onDragOver={ this.onDragOver }\r\n            >\r\n                { this.state.child_components }\r\n\r\n                { this.state.empty && <div className=\"center-text\">This panel is empty</div> }\r\n\r\n                <div className=\"panel-buttons\">\r\n                    <div className=\"button\"><i className=\"fas fa-sliders-h\"></i></div>\r\n                    <div className=\"button red\" onClick={ this.deletePanel }><i className=\"fas fa-times\"></i></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDraggablePanel.propTypes = {\r\n    panel_id: PropTypes.string.isRequired,\r\n\r\n    store_config: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DraggablePanel);\r\n","import {\r\n    EDITMODE_ENTER,\r\n    EDITMODE_LEAVE,\r\n    EDITMODE_SELECT_COMPONENT\r\n} from \"../actions\";\r\n\r\nconst INITIAL_STATE = {\r\n    active: false,\r\n    selected_component: undefined\r\n}\r\n\r\nexport default function(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case EDITMODE_ENTER: {\r\n            return {\r\n                ...state,\r\n                active: true\r\n            }\r\n        }\r\n\r\n        case EDITMODE_LEAVE: {\r\n            return {\r\n                ...state,\r\n                active: false\r\n            }\r\n        }\r\n\r\n        case EDITMODE_SELECT_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                selected_component: action.component_id\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CONFIG_ADD_PANEL,\r\n    CONFIG_DELETE_PANEL,\r\n    CONFIG_DELETE_COMPONENT,\r\n    CONFIG_EDIT_COMPONENT,\r\n    CONFIG_COMPONENT_EDIT_CHILDREN,\r\n    CONFIG_PANEL_ADD_COMPONENT\r\n} from \"../actions\";\r\n\r\nconst INITIAL_STATE = {\r\n    panels: {},\r\n    components: {}\r\n}\r\n\r\nexport default function(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        // TODO: @performance Maybe we should do it in a different way\r\n        case CONFIG_ADD_PANEL: {\r\n            return {\r\n                ...state,\r\n                panels: { ...state.panels, [action.panel.id]: action.panel }\r\n            }\r\n        }\r\n\r\n        case CONFIG_DELETE_PANEL: {\r\n            let new_components_object = state.components;\r\n\r\n            // Delete all components of this panel\r\n            for(const component_id of state.panels[action.panel_id].child_components) {\r\n                // Check if component is a container (i.e. also has child components)\r\n                if(new_components_object[component_id] && new_components_object[component_id].child_components) {\r\n                    // Delete all child components of the conteiner assigned to the panel that is to be deleted\r\n                    for(const child_component_id of new_components_object[component_id].child_components) {\r\n                        delete new_components_object[child_component_id];\r\n                    }\r\n                }\r\n\r\n                delete new_components_object[component_id];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                panels: { ...state.panels, [action.panel_id]: false },\r\n                components: new_components_object\r\n            }\r\n        }\r\n\r\n        case CONFIG_DELETE_COMPONENT: {\r\n            let new_components_object = state.components;\r\n\r\n            // Check if component is a container (i.e. has child components)\r\n            if(new_components_object[action.component_id] &&\r\n            new_components_object[action.component_id].child_components) {\r\n                // Delete all child components of the conteiner\r\n                for(const child_component_id of new_components_object[action.component_id].child_components) {\r\n                    delete new_components_object[child_component_id];\r\n                }\r\n            }\r\n\r\n            delete new_components_object[action.component_id];\r\n\r\n            return {\r\n                ...state,\r\n                components: new_components_object\r\n            }\r\n        }\r\n\r\n        // TODO: @performance Maybe we should do it in a different way\r\n        case CONFIG_PANEL_ADD_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                panels: {\r\n                    ...state.panels,\r\n                    [action.panel_id]: {\r\n                        ...state.panels[action.panel_id],\r\n                        child_components: [ ...state.panels[action.panel_id].child_components, action.component_id ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: @performance Maybe we should do it in a different way\r\n        case CONFIG_EDIT_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                components: {\r\n                    ...state.components,\r\n                    [action.component_object.element.props.component_id]: action.component_object\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: @performance Maybe we should do it in a different way\r\n        case CONFIG_COMPONENT_EDIT_CHILDREN: {\r\n            return {\r\n                ...state,\r\n                components: {\r\n                    ...state.components,\r\n                    [action.component_id]: {\r\n                        ...state.components[action.component_id],\r\n                        child_components: action.child_components\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport edit_mode from \"./edit_mode\";\r\nimport config from \"./config\";\r\n\r\nexport default combineReducers({ edit_mode, config });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    undefined,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { editmode_enter, editmode_leave } from \"../actions\";\r\n\r\nimport \"./TopPanel.css\";\r\n\r\nclass TopPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.switchEditmode = this.switchEditmode.bind(this);\r\n    }\r\n\r\n    switchEditmode() {\r\n        if(this.props.store_editmode.active) editmode_leave(this.props.dispatch);\r\n        else editmode_enter(this.props.dispatch);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"top-panel\">\r\n                <div className=\"left\"></div>\r\n                <div className=\"middle\"></div>\r\n                <div className=\"right\">\r\n                    <div className=\"buttons\">\r\n                        <div\r\n                        className={\"button ui-tooltip-container\" + (this.props.store_editmode.active ? \" active\" : \"\")}\r\n                        onClick={ this.switchEditmode } >\r\n                            <i className=\"material-icons\">edit</i>\r\n\r\n                            <div className=\"ui-tooltip bottom\">\r\n                                { this.props.store_editmode.active ? \"Leave edit mode\" : \"Enter edit mode\" }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"user-avatar\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTopPanel.propTypes = {\r\n    store_editmode: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_editmode: state.edit_mode };\r\n}\r\n\r\nexport default connect(mapStateToProps)(TopPanel);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { config_create_panel } from \"../actions\";\r\n\r\nclass RootPanelContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            child_panels: []\r\n        }\r\n\r\n        this.createNewPanel = this.createNewPanel.bind(this);\r\n    }\r\n\r\n    createNewPanel() {\r\n        const new_panel = config_create_panel(this.props.dispatch);\r\n\r\n        this.setState({ child_panels: [...this.state.child_panels, new_panel] });\r\n\r\n        // Call parent's onClick\r\n        this.props.onClick && this.props.onClick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"root-panels-container\" + (this.props.hidden ? \" hidden\" : \"\")}>\r\n                { this.state.child_panels }\r\n\r\n                <div className=\"panel-placeholder\"\r\n                onClick={ this.createNewPanel } >\r\n                    { this.props.new_contaier\r\n                    ? <div className=\"add-icon\"><i className=\"fas fa-chevron-right\"></i></div>\r\n                    : <div className=\"add-icon\"><i className=\"fas fa-plus\"></i></div> }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRootPanelContainer.propTypes = {\r\n    onClick: PropTypes.func,\r\n    new_contaier: PropTypes.bool,\r\n    hidden: PropTypes.bool,\r\n\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_editmode: state.edit_mode };\r\n}\r\n\r\nexport default connect(mapStateToProps)(RootPanelContainer);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Component extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onDragStart = this.onDragStart.bind(this);\r\n    }\r\n\r\n    onDragStart(e) {\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n        e.dataTransfer.setData(\"text\", this.props.component_type);\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item\" draggable onDragStart={ this.onDragStart }>\r\n                <div className=\"component\">{ this.props.children }</div>\r\n                <div className=\"name\">{ this.props.name }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nComponent.propTypes = {\r\n    component_type: PropTypes.string.isRequired,\r\n\r\n    name: PropTypes.string.isRequired,\r\n    children: PropTypes.any.isRequired\r\n}\r\n\r\n// TODO: @functionality allow horizontal scrolling in the future\r\nexport default class DraggableComponentsDrawer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"draggable-components-drawer\">\r\n                <div className=\"container\">\r\n                    <Component name=\"Button\" component_type=\"button\">\r\n                        <button className=\"ui-button1 bigger\">button</button>\r\n                    </Component>\r\n\r\n                    <Component name=\"Input field\" component_type=\"input\">\r\n                        <div className=\"ui-input-with-name\">\r\n                            <div className=\"ui-input-name1\">Input field</div>\r\n                            <input type=\"text\" className=\"ui-input1\" style={ {width:\"100px\"} } />\r\n                        </div>\r\n                    </Component>\r\n\r\n                    <Component name=\"Container\" component_type=\"horizontal_container\">\r\n                        <div className=\"components-container\">\r\n                            <div></div>\r\n                        </div>\r\n                    </Component>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport RootPanelsContainer from \"../components/RootPanelsContainer\";\r\nimport DraggableComponentsDrawer from \"../components/DraggableComponentsDrawer\";\r\n\r\nimport \"./DynamicPage.css\";\r\n\r\nclass DynamicPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            root_panel_containers_count: 1\r\n        }\r\n\r\n        this.createRootContainer = this.createRootContainer.bind(this);\r\n    }\r\n\r\n    createRootContainer() {\r\n        this.setState({ root_panel_containers_count: this.state.root_panel_containers_count + 1 })\r\n    }\r\n\r\n    render() {\r\n        const containers = [];\r\n\r\n        for(let i = 0; i < this.state.root_panel_containers_count; i++) {\r\n            containers.push(<RootPanelsContainer key={ i } />);\r\n        }\r\n\r\n        return (\r\n            <div className={ \"route dynamic-page\" + (this.props.store_editmode.active ? \" edit-mode\" : \"\") }>\r\n                { containers }\r\n\r\n                <RootPanelsContainer\r\n                key={ this.state.root_panel_containers_count + 1 }\r\n                new_contaier\r\n                hidden={ !this.props.store_editmode.active }\r\n                onClick={ this.createRootContainer } />\r\n\r\n                <DraggableComponentsDrawer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDynamicPage.propTypes = {\r\n    store_editmode: PropTypes.object.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_editmode: state.edit_mode };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DynamicPage);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { DC_Input_CP } from \"../draggable_components/DC_Input\";\r\nimport { DC_Button_CP } from \"../draggable_components/DC_Button\";\r\nimport { DC_Container_CP } from \"../draggable_components/DC_Container\";\r\n\r\nimport \"./LeftPanel.css\";\r\n\r\nclass ComponentEditMode extends React.Component {\r\n    // TODO: @placeholder We should make this dynamic to allow users to add custom draggable components\r\n    /*\r\n        Something like this:\r\n        const ConfigPanel = getConfigPanelForComponent(\"customcomponent\");\r\n        return <ConfigPanel />;\r\n    */\r\n    render() {\r\n        if(!this.props.store_editmode.active || !this.props.store_editmode.selected_component) return false;\r\n\r\n        const selected_component_id = this.props.store_editmode.selected_component;\r\n        const selected_component = this.props.store_config.components[selected_component_id];\r\n\r\n        // Component was deleted\r\n        if(!selected_component) return false;\r\n\r\n        switch(selected_component.type) {\r\n            case \"input\":\r\n                return <DC_Input_CP target_component_id={ selected_component_id } />;\r\n            case \"button\":\r\n                return <DC_Button_CP target_component_id={ selected_component_id } />;\r\n            case \"horizontal_container\":\r\n                return <DC_Container_CP target_component_id={ selected_component_id } />;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n}\r\n\r\nclass LeftPanel extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"left-panel\" className={ this.props.store_editmode.active ? \"shown\" : \"\" }>\r\n                { this.props.store_editmode.active &&\r\n                <ComponentEditMode\r\n                store_editmode={ this.props.store_editmode }\r\n                store_config={ this.props.store_config }\r\n                /> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nComponentEditMode.propTypes = {\r\n    store_editmode: PropTypes.object.isRequired,\r\n    store_config: PropTypes.object.isRequired\r\n}\r\n\r\nLeftPanel.propTypes = {\r\n    store_editmode: PropTypes.object.isRequired,\r\n    store_config: PropTypes.object.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_editmode: state.edit_mode, store_config: state.config };\r\n}\r\n\r\nexport default connect(mapStateToProps)(LeftPanel);\r\n\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport store from \"./redux-store\";\r\n\r\nimport TopPanel from \"./components/TopPanel\";\r\nimport DynamicPage from \"./routes/DynamicPage\";\r\nimport LeftPanel from \"./components/LeftPanel\";\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.store = store;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Provider store={ this.store }>\r\n                    <TopPanel />\r\n\r\n                    <div id=\"content\">\r\n                        <LeftPanel />\r\n\r\n                        <div id=\"router\">\r\n                            <Route path=\"/:page_id\" component={ DynamicPage } />\r\n                            <Route path=\"*\" component={ () => <div>Go to /something to see an exaple</div> } />\r\n                        </div>\r\n                    </div>\r\n                </Provider>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\nimport \"./ui.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}